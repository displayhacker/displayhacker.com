@{
    ViewBag.Title = "Plasma";
}

@section styles{
    <style>
        div#canvas-bg {
            background-color: #000;
            margin: 0; padding: 0;
            position: relative;
            width: 512px; height: 512px;
        }
        canvas {
            position: absolute;
            top: 0; left: 0;
            width:512px; height:512px;
        }
        table {
            margin:32px 0;
            width: 100%;
        }
        table th, table td {
            vertical-align: top;
        }
        table th {
            text-align: center;
        }
        table td.canvas-cell {
            padding: 0 16px 0 0;
            width: 512px;
        }
        table td.text-cell {
            background-color: #202020;
            padding: 8px;
            width: 99%;
        }
    </style>
}

<h2>@ViewBag.Title</h2>

<table>
    <tr>
        <th>
            <p>This uses WebGL Pixel Shaders.</p>
            <p>This may not work if you're using a cell phone or other mobile device.</p>
        </th>
        <th></th>
    </tr>
    <tr>
        <td class="canvas-cell">
            <div id="canvas-bg">
                <canvas id="canvas-element"></canvas>
            </div>
        </td>
        <td class="text-cell">
            <p>
                Unlike my other experiments, this runs on the GPU instead of the CPU, making it much more efficient and faster.
            </p>
            <p>
                To toggle mouse controls on and off, click anywhere.
            </p>
			<table>
				<tr>
					<th>Mouse controls:</th>
					<td id="mouse-controls-cell"></td>
				</tr>
				<tr>
					<th>X value:</th>
					<td id="x-value-cell"></td>
				</tr>
				<tr>
					<th>Y value:</th>
					<td id="y-value-cell"></td>
				</tr>
				<tr>
					<th>X max:</th>
					<td id="x-max-cell"></td>
				</tr>
				<tr>
					<th>Y max:</th>
					<td id="y-max-cell"></td>
				</tr>
				<tr>
					<th>X %:</th>
					<td id="x-percent-cell"></td>
				</tr>
				<tr>
					<th>Y %:</th>
					<td id="y-percent-cell"></td>
				</tr>
			</table>
        </td>
    </tr>
</table>

@section scripts{
    <script src='@Url.Content($"~/js/plasma.js?no-cache={Guid.NewGuid()}")'></script>
	<script id="vertex-shader-source" type="x-shader">
		attribute vec2 a_position;
		attribute vec2 a_textureCoordinates;
			
		uniform vec2 u_resolution;
			
		varying vec2 v_textureCoordinates;
		varying vec2 v_resolution;
			
		void main() {
			// convert the rectangle from pixels to 0.0 to 1.0
			vec2 zeroToOne = a_position / u_resolution;
				
			// convert from 0->1 to 0->2
			vec2 zeroToTwo = zeroToOne * 2.0;
				
			// convert from 0->2 to -1->+1 (clipspace)
			vec2 clipSpace = zeroToTwo - 1.0;
				
			gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
				
			// pass the texCoord to the fragment shader
			// The GPU will interpolate this value between points.
			v_textureCoordinates = a_textureCoordinates;
			v_resolution = u_resolution;
		}
	</script>
	<script id="fragment-shader-source" type="x-shader">
		#define PI 3.1415926535897932384626433832795
		
		#ifdef GL_ES
		precision mediump float;
		#endif
		
		uniform float u_t;
		uniform vec2 u_mouse;
		uniform vec3 u_gradientColors[256];
		
		// the texCoords passed in from the vertex shader.
		varying vec2 v_textureCoordinates;
		varying vec2 v_resolution;
		
		float random (in vec2 st) {
			return
				0.5 * (
                    1.0 + (
                        sin(
					        u_t * (
						        dot(
							        st.xy,
							        vec2(sqrt(5.0), (atan(u_mouse.y / u_mouse.x) + (PI * 1.5)) / PI)
						        )
					        )
                        )
                    )
				)
			;
		}
		
		float noise(vec2 st) {
			vec2 i = floor(st);
			vec2 f = fract(st);
			vec2 u = f * f * (3.0 - 2.0 * f);
			return
				mix(
					mix(
						random(i + vec2(0.0, 0.0)),
						random(i + vec2(1.0, 0.0)),
						u.x
					),
					mix(
						random(i + vec2(0.0, 1.0)),
						random(i + vec2(1.0, 1.0)),
						u.x
					),
					u.y
				)
			;
		}
		
		mat2 rotate2d(float angle){
			return
				mat2(
					cos(angle),
					-sin(angle),
					sin(angle),
					cos(angle)
				)
			;
		}
		
		float lines(in vec2 pos, float b){
			float scale = (u_mouse.x + 1.0) * 2.0;
			pos *= scale;
			return
				smoothstep(
					(1.0 + asin(u_mouse.x)) * 0.01,
					0.5 + b * 0.5,
					0.5 * abs(
						(atan((pos.y + u_mouse.x) / (u_mouse.y + pos.x))) + b * (sin((pos.x * u_mouse.y) - (u_mouse.x * pos.y)))
					)
				)
			;
		}
		
		void main() {
			vec2 st = gl_FragCoord.xy / v_resolution.xy;
			st.y *= v_resolution.y / v_resolution.x;
			
			vec2 pos = st.yx * 8.0;
			
			// Add noise
			pos = rotate2d(noise(pos)) * pos;
			
			// Draw lines
			float pattern = lines(pos, sqrt(u_mouse.x * u_mouse.x + u_mouse.y * u_mouse.y) + 2.0);
			if (pattern > 1.0)
				pattern = 1.0;
			
			if (pattern < 0.0)
				pattern = 0.0;
			
			// Color
			int colorIndex = int(pattern * 255.0);
			vec3 color = vec3(0.0, 1.0, 0.0); // Green shows there was an issue finding the gradient color
			for (int i = 0; i < 256; ++i) {
				if (i == colorIndex) {
					color = u_gradientColors[i];
				}
			}
			gl_FragColor = vec4(color.x, color.y, color.z, 1.0);
		}
	</script>
}